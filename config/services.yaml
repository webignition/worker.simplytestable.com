imports:
- { resource: parameters/tasktypes.yaml }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  hostname: '%env(HOSTNAME)%'
  token: '%env(TOKEN)%'
  curl_options:
    CURLOPT_SSL_VERIFYPEER: false
    CURLOPT_SSL_VERIFYHOST: false
    CURLOPT_TIMEOUT_MS: 30000
  link_integrity_user_agents:
    - ST Link Integrity Task Driver (http://bit.ly/RlhKCL)
    - Mozilla/5.0
  html_validation_invalid_character_encoding_output_transformer_priority: 90
  html_validation_task_type_performer_priority: 100
  css_validation_task_type_performer_priority: 100
  link_integrity_task_type_performer_priority: 100
  url_discovery_task_type_performer_priority: 100
  web_page_task_source_preparer_priority: 100
  web_page_task_invalid_source_examiner_priority: 200
  web_page_task_failed_source_examiner_priority: 190
  web_page_task_content_encoding_examiner_priority: 180

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,App}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\KernelExceptionLoggerEventListener:
      tags:
      - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 20 }

    App\EventListener\ConsoleExceptionLoggerEventListener:
      tags:
      - { name: kernel.event_listener, event: console.error, method: onConsoleError, priority: 20 }

    App\Cache\CoreApplicationRouterCacheWarmer:
      tags:
        - { name: kernel.cache_warmer, priority: 0 }

    App\EventListener\TaskCreatedEventListener:
      tags:
      - { name: kernel.event_listener, event: task.created }

    App\EventListener\TaskPreparedEventListener:
      tags:
        - { name: kernel.event_listener, event: task.prepared }

    App\EventListener\TaskPerformedEventListener:
      tags:
        - { name: kernel.event_listener, event: task.performed }

    App\EventListener\TaskReportedCompletionEventListener:
      tags:
        - { name: kernel.event_listener, event: task.reported-completion }

    App\Services\CoreApplicationRouter:
      arguments:
        $baseUrl: '%env(CORE_URL)%'
        $kernelProjectDirectory: '%kernel.project_dir%'
        $cacheDirectory: '%kernel.cache_dir%'

    App\Services\TaskTypePreparer\Factory:
      arguments:
        $taskPreparers:
          - '@App\Services\TaskTypePreparer\WebPageTaskSourcePreparer'

    App\Services\TaskTypePerformer\Factory:
      arguments:
        $taskPerformers:
          - '@App\Services\TaskTypePerformer\HtmlValidation\TaskTypePerformer'
          - '@App\Services\TaskTypePerformer\HtmlValidation\InvalidCharacterEncodingOutputTransformer'
          - '@App\Services\TaskTypePerformer\CssValidationTaskTypePerformer'
          - '@App\Services\TaskTypePerformer\LinkIntegrityTaskTypePerformer'
          - '@App\Services\TaskTypePerformer\UrlDiscoveryTaskTypePerformer'
          - '@App\Services\TaskTypePerformer\WebPageTask\InvalidSourceExaminer'
          - '@App\Services\TaskTypePerformer\WebPageTask\FailedSourceExaminer'
          - '@App\Services\TaskTypePerformer\WebPageTask\ContentEncodingExaminer'

    App\Services\TasksService:
      public: true
      calls:
        - [setWorkerProcessCount, ['%env(WORKER_PROCESS_COUNT)%']]
        - [setMaxTasksRequestFactor, ['%env(MAX_TASKS_REQUEST_FACTOR)%']]

    GuzzleHttp\Cookie\CookieJarInterface:
      class: GuzzleHttp\Cookie\CookieJar

    GuzzleHttp\HandlerStack:
      factory: 'App\Services\HttpHandlerStackFactory:create'

    Kevinrob\GuzzleCache\CacheMiddleware:
      factory: 'App\Services\HttpCacheMiddlewareFactory:create'

    webignition\HttpHistoryContainer\Container:

    App\Services\HttpClientService:
      arguments:
        $curlOptions: '%curl_options%'

    GuzzleHttp\Client:
      factory: 'App\Services\HttpClientService:getHttpClient'

    App\Services\TaskTypePerformer\HtmlValidation\TaskTypePerformer:
      arguments:
        $priority: '%html_validation_task_type_performer_priority%'

    App\Services\TaskTypePerformer\CssValidatorWrapperConfigurationFactory:
      arguments:
        - '%env(CSS_VALIDATOR_JAR_PATH)%'

    App\Services\TaskTypePerformer\LinkCheckerConfigurationFactory:
      arguments:
        - '%link_integrity_user_agents%'

    App\Services\TaskTypePerformer\CssValidationTaskTypePerformer:
      arguments:
        $priority: '%html_validation_task_type_performer_priority%'

    App\Services\TaskTypePerformer\LinkIntegrityTaskTypePerformer:
      arguments:
        $priority: '%html_validation_task_type_performer_priority%'

    App\Services\TaskTypePerformer\UrlDiscoveryTaskTypePerformer:
      arguments:
        $priority: '%html_validation_task_type_performer_priority%'

    webignition\WebResource\Retriever:
      class: webignition\WebResource\Retriever
      arguments:
        $httpClient: '@GuzzleHttp\Client'
        $allowedContentTypes:
          - 'text/html'
          - 'application/xhtml+xml'
        $allowUnknownResourceTypes: false

    app.services.web-resource-retriever.web-page:
      class: webignition\WebResource\Retriever
      arguments:
        $httpClient: '@GuzzleHttp\Client'
        $allowedContentTypes:
          - 'text/html'
          - 'application/xhtml+xml'
        $allowUnknownResourceTypes: false

    webignition\Guzzle\Middleware\HttpAuthentication\HttpAuthenticationMiddleware:

    webignition\Guzzle\Middleware\RequestHeaders\RequestHeadersMiddleware:

    webignition\HtmlValidator\Wrapper\CommandFactory:
      arguments:
        $validatorPath: '%env(HTML_VALIDATOR_PATH)%'

    webignition\HtmlValidatorOutput\Parser\Parser:

    webignition\HtmlValidator\Wrapper\CommandExecutor:

    webignition\HtmlValidator\Wrapper\Wrapper:

    webignition\CssValidatorWrapper\Wrapper:

    webignition\NodeJslint\Wrapper\Wrapper:

    App\Services\Resque\QueueService:
      public: true

    # For retrieval of commands from container in resque jobs
    App\Command\Task\PrepareCommand:
      public: true

    App\Command\Task\PerformCommand:
      public: true

    App\Command\Task\ReportCompletionCommand:
      public: true

    App\Command\Tasks\RequestCommand:
      public: true

    App\Services\TaskTypeService:
      arguments:
        $taskTypeProperties: '%task_types%'

    App\Services\ApplicationState:
      arguments:
        $stateResourcePath: '%kernel.project_dir%/config/state/%kernel.environment%'

    App\Services\ApplicationConfiguration:
      public: true
      arguments:
        $hostname: '%hostname%'
        $token: '%token%'

    App\Services\TaskTypePreparer\WebPageTaskSourcePreparer:
      arguments:
        $priority: '%web_page_task_source_preparer_priority%'

    App\Services\TaskTypePerformer\WebPageTask\InvalidSourceExaminer:
      arguments:
        $priority:  '%web_page_task_invalid_source_examiner_priority%'

    App\Services\TaskTypePerformer\WebPageTask\FailedSourceExaminer:
      arguments:
        $priority:  '%web_page_task_failed_source_examiner_priority%'

    App\Services\TaskTypePerformer\WebPageTask\ContentEncodingExaminer:
      arguments:
        $priority:  '%web_page_task_content_encoding_examiner_priority%'

    App\Services\TaskTypePerformer\HtmlValidation\InvalidCharacterEncodingOutputTransformer:
      arguments:
        $priority:  '%html_validation_invalid_character_encoding_output_transformer_priority%'

    webignition\InternetMediaType\Parser\Parser:
      class: webignition\InternetMediaType\Parser\Parser
      calls:
        - method: setIgnoreInvalidAttributes
          arguments:
              - true
        - method: setAttemptToRecoverFromInvalidInternalCharacter
          arguments:
              - true
