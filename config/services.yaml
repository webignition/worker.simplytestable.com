imports:
- { resource: parameters/tasktypes.yaml }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  memcached_host: localhost
  memcached_port: 11211
  hostname: '%env(HOSTNAME)%'
  token: '%env(TOKEN)%'
  curl_options:
    CURLOPT_SSL_VERIFYPEER: false
    CURLOPT_SSL_VERIFYHOST: false
    CURLOPT_TIMEOUT_MS: 30000
  link_integrity_user_agents:
    - ST Link Integrity Task Driver (http://bit.ly/RlhKCL)
    - Mozilla/5.0
  java_executable_path: java

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,App}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\KernelExceptionLoggerEventListener:
      tags:
      - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 20 }

    App\EventListener\ConsoleExceptionLoggerEventListener:
      tags:
      - { name: kernel.event_listener, event: console.error, method: onConsoleError, priority: 20 }

    App\Cache\CoreApplicationRouterCacheWarmer:
      tags:
        - { name: kernel.cache_warmer, priority: 0 }

    App\EventListener\TaskCreatedEventListener:
      tags:
      - { name: kernel.event_listener, event: task.created }

    App\EventListener\TaskPreparedEventListener:
      tags:
        - { name: kernel.event_listener, event: task.prepared }

    App\EventListener\TaskPerformedEventListener:
      tags:
        - { name: kernel.event_listener, event: task.performed }

    App\EventListener\TaskReportedCompletionEventListener:
      tags:
        - { name: kernel.event_listener, event: task.reported-completion }

    App\Services\CoreApplicationRouter:
      arguments:
        $baseUrl: '%env(CORE_URL)%'
        $kernelProjectDirectory: '%kernel.project_dir%'
        $cacheDirectory: '%kernel.cache_dir%'

    App\Services\TasksService:
      public: true
      arguments:
        $workerProcessCount: '%env(WORKER_PROCESS_COUNT)%'
        $maxTasksRequestFactor: '%env(MAX_TASKS_REQUEST_FACTOR)%'

    GuzzleHttp\Cookie\CookieJarInterface:
      class: GuzzleHttp\Cookie\CookieJar

    webignition\Guzzle\Middleware\ResponseLocationUriFixer\Factory:
      class: webignition\Guzzle\Middleware\ResponseLocationUriFixer\Factory

    GuzzleHttp\HandlerStack:
      factory: 'App\Services\HttpHandlerStackFactory:create'

    webignition\HttpHistoryContainer\Container:

    App\Services\HttpClientService:
      arguments:
        $curlOptions: '%curl_options%'

    GuzzleHttp\Client:
      factory: 'App\Services\HttpClientService:getHttpClient'

    App\Services\TaskTypePreparer\WebPageTaskSourcePreparer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 200 }
      arguments:
        $webResourceRetriever: '@app.services.web-resource-retriever.web-page'

    App\Services\TaskExaminer\WebPageTask\InvalidSourceExaminer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 190 }

    App\Services\TaskExaminer\WebPageTask\FailedSourceExaminer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 180 }

    App\Services\TaskExaminer\WebPageTask\ContentEncodingExaminer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 170 }

    App\Services\TaskTypePreparer\CssTaskSourcePreparer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 100 }
      arguments:
        $webResourceRetriever: '@app.services.web-resource-retriever.css'

    App\Services\TaskTypePreparer\FinalTaskPreparer:
      tags:
        - { name: kernel.event_listener, event: task.prepare, priority: 10 }

    App\Services\TaskTypePerformer\HtmlValidation\TaskTypePerformer:
      tags:
        - { name: kernel.event_listener, event: task.perform, priority: 100 }

    App\Services\TaskTypePerformer\HtmlValidation\InvalidCharacterEncodingOutputTransformer:
      tags:
        - { name: kernel.event_listener, event: task.perform, priority: 90 }

    App\Services\TaskTypePerformer\LinkCheckerConfigurationFactory:
      arguments:
        - '%link_integrity_user_agents%'

    App\Services\TaskTypePerformer\CssValidationTaskTypePerformer:
      tags:
        - { name: kernel.event_listener, event: task.perform, priority: 100 }

    App\Services\TaskTypePerformer\LinkIntegrityTaskTypePerformer:
      tags:
        - { name: kernel.event_listener, event: task.perform, priority: 100 }

    App\Services\TaskTypePerformer\UrlDiscoveryTaskTypePerformer:
      tags:
        - { name: kernel.event_listener, event: task.perform, priority: 100 }

    webignition\WebResource\Retriever:
      class: webignition\WebResource\Retriever
      arguments:
        $httpClient: '@GuzzleHttp\Client'
        $allowedContentTypes:
          - 'text/html'
          - 'application/xhtml+xml'
        $allowUnknownResourceTypes: false

    app.services.web-resource-retriever.web-page:
      class: webignition\WebResource\Retriever
      arguments:
        $httpClient: '@GuzzleHttp\Client'
        $allowedContentTypes:
          - 'text/html'
          - 'application/xhtml+xml'
        $allowUnknownResourceTypes: false

    app.services.web-resource-retriever.css:
      class: webignition\WebResource\Retriever
      arguments:
        $httpClient: '@GuzzleHttp\Client'
        $allowedContentTypes:
          - 'text/css'
        $allowUnknownResourceTypes: false

    webignition\Guzzle\Middleware\HttpAuthentication\HostComparer:

    webignition\Guzzle\Middleware\HttpAuthentication\HttpAuthenticationMiddleware:

    webignition\Guzzle\Middleware\RequestHeaders\RequestHeadersMiddleware:

    webignition\HtmlValidator\Wrapper\CommandFactory:
      arguments:
        $validatorPath: '%env(HTML_VALIDATOR_PATH)%'

    webignition\HtmlValidatorOutput\Parser\Parser:

    webignition\HtmlValidator\Wrapper\CommandExecutor:

    webignition\HtmlValidator\Wrapper\Wrapper:

    webignition\CssValidatorWrapper\SourceInspector:

    webignition\CssValidatorWrapper\SourceMutator:

    webignition\CssValidatorWrapper\SourceStorage:

    webignition\CssValidatorWrapper\OutputMutator:

    webignition\CssValidatorWrapper\CommandFactory:
      arguments:
        $javaExecutablePath: '%java_executable_path%'
        $cssValidatorJarPath: '%env(CSS_VALIDATOR_JAR_PATH)%'

    webignition\CssValidatorOutput\Parser\OutputParser:

    webignition\CssValidatorWrapper\CommandExecutor:

    webignition\CssValidatorWrapper\Wrapper:

    App\Services\Resque\QueueService:
      public: true

    # For retrieval of commands from container in resque jobs
    App\Command\Task\PrepareCommand:
      public: true

    App\Command\Task\PerformCommand:
      public: true

    App\Command\Task\ReportCompletionCommand:
      public: true

    App\Command\Tasks\RequestCommand:
      public: true

    App\Services\TaskTypeService:
      arguments:
        $taskTypeProperties: '%task_types%'

    App\Services\ApplicationState:
      arguments:
        $stateResourcePath: '%kernel.project_dir%/config/state/%kernel.environment%'

    App\Services\ApplicationConfiguration:
      public: true
      arguments:
        $hostname: '%hostname%'
        $token: '%token%'

    webignition\InternetMediaType\Parser\Parser:
      class: webignition\InternetMediaType\Parser\Parser
      calls:
        - method: setIgnoreInvalidAttributes
          arguments:
              - true
        - method: setAttemptToRecoverFromInvalidInternalCharacter
          arguments:
              - true

    webignition\ResourceStorage\ResourceStorage:
      class: webignition\ResourceStorage\ResourceStorage

    webignition\IgnoredUrlVerifier\IgnoredUrlVerifier:

    Symfony\Component\Lock\Store\PdoStore:
      arguments:
        $connOrDsn: 'mysql:host=%env(LOCK_DATABASE_HOST)%;dbname=%env(LOCK_DATABASE_NAME)%'
        $options:
          db_username: '%env(LOCK_DATABASE_USER)%'
          db_password: '%env(LOCK_DATABASE_PASSWORD)%'

    Symfony\Component\Lock\Factory:
      class: Symfony\Component\Lock\Factory
      arguments:
        $store: '@Symfony\Component\Lock\Store\PdoStore'

    Memcached:
      class: Memcached
      calls:
        - method: addServer
          arguments:
            - '%memcached_host%'
            - '%memcached_port%'

    Doctrine\Common\Cache\MemcachedCache:
      calls:
        - method: setMemcached
          arguments:
            - '@Memcached'

    Doctrine\Common\Cache\Cache:
      alias: Doctrine\Common\Cache\MemcachedCache

    Kevinrob\GuzzleCache\Storage\DoctrineCacheStorage:

    Kevinrob\GuzzleCache\Strategy\PrivateCacheStrategy:

    Kevinrob\GuzzleCache\CacheMiddleware:

    webignition\UrlHealthChecker\Configuration:
      $configurationValues:
        user-agents: '%link_integrity_user_agents%'
        http-method-list: ['GET']
        retry-on-bad-response: false

    webignition\UrlHealthChecker\UrlHealthChecker:
      calls:
        - method: setHttpClient
          arguments:
            - '@GuzzleHttp\Client'
        - method: setConfiguration
          arguments:
            - '@webignition\UrlHealthChecker\Configuration'

    webignition\HtmlDocument\LinkChecker\LinkChecker:
